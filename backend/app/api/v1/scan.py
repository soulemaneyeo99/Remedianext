"""
Routes API Scan - Identification plantes par image
Utilise Gemini Vision API pour reconnaissance
"""

from fastapi import APIRouter, File, UploadFile, HTTPException, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional
import logging
from io import BytesIO
from PIL import Image
import base64

from app.core.config import settings
from app.services.gemini_service import gemini_service

router = APIRouter()
logger = logging.getLogger(__name__)

# ============================================
# MODELS
# ============================================

class PlantIdentification(BaseModel):
    """Mod√®le de r√©ponse identification"""
    name: str
    scientificName: str
    confidence: float
    description: str
    properties: List[str]
    uses: List[str]
    family: Optional[str] = None
    habitat: Optional[str] = None

class ScanResponse(BaseModel):
    """R√©ponse compl√®te scan"""
    success: bool
    plant: Optional[PlantIdentification] = None
    error: Optional[str] = None
    message: Optional[str] = None

# ============================================
# ROUTES
# ============================================

@router.post("/identify", response_model=ScanResponse)
async def identify_plant(file: UploadFile = File(...)):
    """
    üîç Identifier une plante depuis une image
    
    - **file**: Image de la plante (JPG, PNG, WebP)
    - Taille max: 10MB
    - R√©solution recommand√©e: 800x800px minimum
    
    Returns:
        ScanResponse avec identification ou erreur
    """
    
    try:
        # Validation fichier
        if not file.content_type.startswith("image/"):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Le fichier doit √™tre une image (JPG, PNG, WebP)"
            )
        
        # Lire image
        logger.info(f"üì∏ Reading image: {file.filename} ({file.content_type})")
        image_data = await file.read()
        
        # Validation taille
        if len(image_data) > 10 * 1024 * 1024:  # 10MB
            raise HTTPException(
                status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
                detail="Image trop grande (max 10MB)"
            )
        
        # V√©rifier Gemini configur√©
        if not settings.gemini_api_key:
            logger.warning("‚ö†Ô∏è Gemini API key not configured - using demo data")
            return ScanResponse(
                success=True,
                plant=get_demo_plant(),
                message="Mode d√©monstration (API Gemini non configur√©e)"
            )
        
        # Identifier avec Gemini Vision
        logger.info("ü§ñ Calling Gemini Vision API...")
        result = await gemini_service.identify_plant(image_data)
        
        logger.info(f"‚úÖ Plant identified: {result.get('name', 'Unknown')}")
        
        return ScanResponse(
            success=True,
            plant=PlantIdentification(**result)
        )
        
    except HTTPException:
        raise
        
    except Exception as e:
        logger.error(f"‚ùå Identification error: {str(e)}", exc_info=True)
        
        # En cas d'erreur, retourner d√©mo
        return ScanResponse(
            success=True,
            plant=get_demo_plant(),
            message=f"Erreur API - Mode d√©mo activ√©: {str(e)}"
        )

@router.post("/batch", response_model=List[ScanResponse])
async def identify_plants_batch(files: List[UploadFile] = File(...)):
    """
    üîç Identifier plusieurs plantes (batch)
    
    - **files**: Liste d'images (max 5)
    
    Returns:
        Liste de ScanResponse
    """
    
    if len(files) > 5:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Maximum 5 images par batch"
        )
    
    results = []
    
    for file in files:
        try:
            result = await identify_plant(file)
            results.append(result)
        except Exception as e:
            logger.error(f"Error processing {file.filename}: {e}")
            results.append(ScanResponse(
                success=False,
                error=str(e)
            ))
    
    return results

# ============================================
# HELPERS
# ============================================

def get_demo_plant() -> PlantIdentification:
    """
    Plante d√©mo pour fallback quand API indisponible
    """
    return PlantIdentification(
        name="Moringa",
        scientificName="Moringa oleifera",
        confidence=85.0,
        description="Le Moringa est un super-aliment exceptionnel, riche en vitamines, min√©raux et prot√©ines. Ses feuilles sont utilis√©es en m√©decine traditionnelle africaine pour leurs nombreuses vertus nutritives et th√©rapeutiques.",
        properties=[
            "Nutritif",
            "Antioxydant",
            "Anti-inflammatoire",
            "√ânergisant",
            "Immunostimulant"
        ],
        uses=[
            "Malnutrition",
            "Fatigue chronique",
            "Renforcement du syst√®me immunitaire",
            "Probl√®mes digestifs",
            "An√©mie"
        ],
        family="Moringaceae",
        habitat="Zones tropicales et subtropicales"
    )