"""
REMEDIA Backend API v2.0
FastAPI + Gemini AI pour reconnaissance de plantes m√©dicinales africaines

Architecture:
- FastAPI pour l'API REST
- Gemini AI pour reconnaissance et chat
- MongoDB/JSON pour base de donn√©es plantes
- CORS configur√© pour production Vercel
"""

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles
from starlette.middleware.base import BaseHTTPMiddleware
import logging
import time
from pathlib import Path
from typing import Callable

from app.core.config import settings
from app.api.v1 import scan, chat, plants

# ============================================
# CONFIGURATION LOGGING
# ============================================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
    ]
)
logger = logging.getLogger(__name__)

# ============================================
# CR√âATION APPLICATION FASTAPI
# ============================================
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="API pour la reconnaissance de plantes m√©dicinales avec IA",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
    # M√©tadonn√©es pour documentation
    contact={
        "name": "REMEDIA Team",
        "email": "contact@remedia.africa",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# ============================================
# MIDDLEWARE 1: CORS (EN PREMIER - CRITIQUE!)
# ============================================
# Configuration CORS compl√®te pour production
app.add_middleware(
    CORSMiddleware,
    # Origines autoris√©es (production + d√©veloppement)
    allow_origins=[
        "http://localhost:3000",              # Dev local
        "http://localhost:3001",              # Dev alternatif
        "https://remedianext.vercel.app",     # Production Vercel
        "https://remediav2.vercel.app",       # Production Vercel v2
        "https://*.vercel.app",               # Previews Vercel
        "https://remedia-henna.vercel.app",   # Ancien domaine (si encore utilis√©)
        "https://remedianext-*.vercel.app",   # Pattern previews
    ],
    # Autoriser les credentials (cookies, auth)
    allow_credentials=True,
    # M√©thodes HTTP autoris√©es
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    # Headers autoris√©s (important pour Content-Type)
    allow_headers=[
        "Content-Type",
        "Authorization",
        "Accept",
        "Origin",
        "User-Agent",
        "DNT",
        "Cache-Control",
        "X-Requested-With",
    ],
    # Headers expos√©s au client
    expose_headers=[
        "Content-Length",
        "Content-Range",
        "X-Process-Time",
    ],
    # Cache preflight requests (1 heure)
    max_age=3600,
)

# ============================================
# MIDDLEWARE 2: LOGGING PERSONNALIS√â
# ============================================
class RequestLoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware pour logger toutes les requ√™tes HTTP.
    
    CRITIQUE: Ignore les requ√™tes OPTIONS pour ne pas bloquer CORS!
    """
    
    async def dispatch(self, request: Request, call_next: Callable):
        # ‚úÖ CRITIQUE: Laisser passer OPTIONS imm√©diatement
        # Sans logging ni validation, pour que CORS puisse r√©pondre
        if request.method == "OPTIONS":
            return await call_next(request)
        
        # Pour les autres m√©thodes, logger normalement
        start_time = time.time()
        
        # Log requ√™te entrante
        logger.info(
            f"‚û°Ô∏è  {request.method} {request.url.path} "
            f"from {request.client.host if request.client else 'unknown'}"
        )
        
        try:
            # Traiter la requ√™te
            response = await call_next(request)
            
            # Calculer temps de traitement
            process_time = time.time() - start_time
            
            # Log r√©ponse
            status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
            logger.info(
                f"{status_emoji} {request.method} {request.url.path} ‚Üí "
                f"{response.status_code} ({process_time:.3f}s)"
            )
            
            # Ajouter header temps de traitement
            response.headers["X-Process-Time"] = f"{process_time:.3f}"
            
            return response
            
        except Exception as e:
            # Log erreur
            process_time = time.time() - start_time
            logger.error(
                f"üí• {request.method} {request.url.path} ‚Üí "
                f"ERROR: {str(e)} ({process_time:.3f}s)"
            )
            raise

# Ajouter le middleware logging
app.add_middleware(RequestLoggingMiddleware)

# ============================================
# MIDDLEWARE 3: S√âCURIT√â (Optionnel)
# ============================================
# Ajout headers de s√©curit√©
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """Ajoute des headers de s√©curit√© aux r√©ponses"""
    # Skip pour OPTIONS
    if request.method == "OPTIONS":
        return await call_next(request)
    
    response = await call_next(request)
    
    # Headers de s√©curit√©
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"
    
    return response

# ============================================
# INCLUSION DES ROUTES API
# ============================================
app.include_router(
    scan.router,
    prefix="/api/v1",
    tags=["scan"]
)
app.include_router(
    chat.router,
    prefix="/api/v1",
    tags=["chat"]
)
app.include_router(
    plants.router,
    prefix="/api/v1",
    tags=["plants"]
)

# ============================================
# ROUTES SYST√àME
# ============================================

@app.get("/", tags=["system"])
async def root():
    """
    üè† Endpoint racine - Informations sur l'API
    
    Retourne les informations g√©n√©rales sur l'API REMEDIA
    et les endpoints disponibles.
    """
    return {
        "name": settings.app_name,
        "version": settings.app_version,
        "status": "operational",
        "description": "API pour la reconnaissance et l'information sur les plantes m√©dicinales africaines",
        "documentation": {
            "swagger": f"{request.url}docs",
            "redoc": f"{request.url}redoc",
            "openapi": f"{request.url}openapi.json"
        },
        "endpoints": {
            "health": "/health",
            "scan": "/api/v1/scan",
            "chat": "/api/v1/chat",
            "plants": "/api/v1/plants"
        },
        "features": [
            "üîç Reconnaissance de plantes par IA (Gemini Vision)",
            "üí¨ Assistant m√©dical conversationnel",
            "üìö Base de donn√©es de plantes m√©dicinales (150+)",
            "‚úÖ Validation scientifique",
            "üåç Focus plantes m√©dicinales africaines"
        ],
        "links": {
            "frontend": "https://remedianext.vercel.app",
            "github": "https://github.com/votre-repo/remedia",
            "docs": "https://docs.remedia.africa"
        }
    }

@app.get("/health", tags=["system"])
async def health_check():
    """
    ‚ù§Ô∏è Health Check - V√©rifie la sant√© de l'application
    
    Retourne le statut de tous les services et composants.
    """
    # V√©rifier configuration Gemini
    gemini_configured = bool(settings.gemini_api_key)
    
    # Statut global
    all_healthy = gemini_configured
    
    return {
        "status": "healthy" if all_healthy else "degraded",
        "timestamp": time.time(),
        "environment": settings.environment,
        "version": settings.app_version,
        "services": {
            "api": "operational",
            "gemini": "operational" if gemini_configured else "not_configured",
            "scan": "operational" if gemini_configured else "degraded",
            "chat": "operational" if gemini_configured else "degraded",
            "plants": "operational"
        },
        "config": {
            "gemini_configured": gemini_configured,
            "gemini_model": settings.gemini_model if gemini_configured else None,
            "debug_mode": settings.debug
        }
    }

@app.get("/test-gemini", tags=["system"])
async def test_gemini():
    """
    üß™ Test Gemini - Teste la connexion √† l'API Gemini
    
    V√©rifie que la cl√© API Gemini est configur√©e et fonctionnelle.
    """
    try:
        # V√©rifier que la cl√© existe
        if not settings.gemini_api_key:
            return JSONResponse(
                status_code=500,
                content={
                    "success": False,
                    "message": "‚ùå Cl√© API Gemini non configur√©e",
                    "help": "Ajoutez GEMINI_API_KEY dans votre fichier .env ou variables d'environnement",
                    "documentation": "https://ai.google.dev/gemini-api/docs/api-key"
                }
            )
        
        # Test simple avec Gemini
        from app.services.gemini_service import gemini_service
        
        logger.info("üß™ Test de connexion Gemini...")
        result = await gemini_service.chat_medical("Test de connexion - r√©pondre juste 'OK'")
        
        return {
            "success": True,
            "message": "‚úÖ Connexion Gemini fonctionnelle",
            "model": settings.gemini_model,
            "response_preview": result[:100] + "..." if len(result) > 100 else result,
            "timestamp": time.time()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur test Gemini: {str(e)}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": str(e),
                "message": "‚ùå Erreur de connexion √† Gemini",
                "help": "V√©rifiez que votre cl√© API est valide et que vous avez acc√®s √† l'API Gemini"
            }
        )

@app.get("/stats", tags=["system"])
async def get_stats():
    """
    üìä Statistiques - M√©triques de l'API
    
    Retourne des statistiques d'utilisation (√† impl√©menter avec Redis/DB).
    """
    # TODO: Impl√©menter avec vraies m√©triques depuis Redis
    return {
        "total_scans": 3456,
        "total_chats": 12789,
        "plants_database": 150,
        "uptime_hours": 720,
        "avg_response_time_ms": 234,
        "success_rate_percent": 98.5,
        "note": "Donn√©es temps r√©el √† impl√©menter avec Redis"
    }

# ============================================
# GESTIONNAIRES D'ERREURS
# ============================================

@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """Handler pour erreurs 404"""
    return JSONResponse(
        status_code=404,
        content={
            "success": False,
            "error": "Not Found",
            "message": f"L'endpoint {request.url.path} n'existe pas",
            "available_endpoints": [
                "/docs",
                "/api/v1/scan",
                "/api/v1/chat",
                "/api/v1/plants"
            ]
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    """Handler pour erreurs 500"""
    logger.error(f"üí• Erreur interne: {str(exc)}")
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Internal Server Error",
            "message": "Une erreur interne est survenue",
            "details": str(exc) if settings.debug else None
        }
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """
    Gestionnaire d'erreurs global
    
    Capture toutes les exceptions non g√©r√©es pour √©viter les crashes.
    """
    logger.error(f"üí• Erreur non g√©r√©e: {str(exc)}", exc_info=True)
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error": "Erreur interne du serveur",
            "message": str(exc) if settings.debug else "Une erreur inattendue est survenue",
            "timestamp": time.time(),
            "path": request.url.path,
            "method": request.method
        }
    )

# ============================================
# √âV√âNEMENTS LIFECYCLE
# ============================================

@app.on_event("startup")
async def startup_event():
    """Ex√©cut√© au d√©marrage de l'application"""
    logger.info("üöÄ REMEDIA API Starting...")
    logger.info(f"üìã Environment: {settings.environment}")
    logger.info(f"üì¶ Version: {settings.app_version}")
    logger.info(f"üîë Gemini API: {'‚úÖ Configured' if settings.gemini_api_key else '‚ùå Not configured'}")
    logger.info(f"üåç CORS: Enabled for Vercel + localhost")
    logger.info("‚úÖ REMEDIA API Started Successfully!")

@app.on_event("shutdown")
async def shutdown_event():
    """Ex√©cut√© √† l'arr√™t de l'application"""
    logger.info("üõë REMEDIA API Shutting down...")
    # Cleanup si n√©cessaire (fermer connexions DB, etc.)
    logger.info("‚úÖ REMEDIA API Stopped")

# ============================================
# POINT D'ENTR√âE
# ============================================

if __name__ == "__main__":
    import uvicorn
    
    logger.info("üöÄ Starting REMEDIA API via uvicorn...")
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        log_level="info",
        access_log=True,
        use_colors=True,
    )